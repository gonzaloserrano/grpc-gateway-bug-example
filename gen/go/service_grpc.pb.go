// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service.proto

package v1

import (
	context "context"
	v1 "github.com/yourorg/yourprotos/gen/go/your/message1/v1"
	v11 "github.com/yourorg/yourprotos/gen/go/your/message2/v1"
	v12 "github.com/yourorg/yourprotos/gen/go/your/message3/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YourServiceClient is the client API for YourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YourServiceClient interface {
	Do1(ctx context.Context, in *v1.Message1, opts ...grpc.CallOption) (*Empty, error)
	Do2(ctx context.Context, in *v11.Message2, opts ...grpc.CallOption) (*Empty, error)
	Do3(ctx context.Context, in *v12.Message3, opts ...grpc.CallOption) (*Empty, error)
}

type yourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYourServiceClient(cc grpc.ClientConnInterface) YourServiceClient {
	return &yourServiceClient{cc}
}

func (c *yourServiceClient) Do1(ctx context.Context, in *v1.Message1, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/your.service.v1.YourService/Do1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourServiceClient) Do2(ctx context.Context, in *v11.Message2, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/your.service.v1.YourService/Do2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yourServiceClient) Do3(ctx context.Context, in *v12.Message3, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/your.service.v1.YourService/Do3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YourServiceServer is the server API for YourService service.
// All implementations must embed UnimplementedYourServiceServer
// for forward compatibility
type YourServiceServer interface {
	Do1(context.Context, *v1.Message1) (*Empty, error)
	Do2(context.Context, *v11.Message2) (*Empty, error)
	Do3(context.Context, *v12.Message3) (*Empty, error)
	mustEmbedUnimplementedYourServiceServer()
}

// UnimplementedYourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYourServiceServer struct {
}

func (UnimplementedYourServiceServer) Do1(context.Context, *v1.Message1) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do1 not implemented")
}
func (UnimplementedYourServiceServer) Do2(context.Context, *v11.Message2) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do2 not implemented")
}
func (UnimplementedYourServiceServer) Do3(context.Context, *v12.Message3) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do3 not implemented")
}
func (UnimplementedYourServiceServer) mustEmbedUnimplementedYourServiceServer() {}

// UnsafeYourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YourServiceServer will
// result in compilation errors.
type UnsafeYourServiceServer interface {
	mustEmbedUnimplementedYourServiceServer()
}

func RegisterYourServiceServer(s grpc.ServiceRegistrar, srv YourServiceServer) {
	s.RegisterService(&YourService_ServiceDesc, srv)
}

func _YourService_Do1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Message1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourServiceServer).Do1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/your.service.v1.YourService/Do1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourServiceServer).Do1(ctx, req.(*v1.Message1))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourService_Do2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.Message2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourServiceServer).Do2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/your.service.v1.YourService/Do2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourServiceServer).Do2(ctx, req.(*v11.Message2))
	}
	return interceptor(ctx, in, info, handler)
}

func _YourService_Do3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v12.Message3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YourServiceServer).Do3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/your.service.v1.YourService/Do3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YourServiceServer).Do3(ctx, req.(*v12.Message3))
	}
	return interceptor(ctx, in, info, handler)
}

// YourService_ServiceDesc is the grpc.ServiceDesc for YourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "your.service.v1.YourService",
	HandlerType: (*YourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do1",
			Handler:    _YourService_Do1_Handler,
		},
		{
			MethodName: "Do2",
			Handler:    _YourService_Do2_Handler,
		},
		{
			MethodName: "Do3",
			Handler:    _YourService_Do3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
